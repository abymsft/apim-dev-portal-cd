name: Run - Capture

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      OUTPUT_FOLDER_PATH:
        description: 'Folder where you want to extract the artifacts'     
        required: true
        type: string
        default: 'artifacts'

jobs:
  capture:
    runs-on: ubuntu-latest
    environment: development # change this to match the dev environment created in settings 
    outputs:
      output-folder-path: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}
    steps:
      - uses: actions/checkout@v4  
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run Capture
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          APIM_INSTANCE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}  
        run: |     
          $ErrorActionPreference = "Stop"  # Exit on any error
          Write-Host "Installing dependencies..."
          npm install
          Write-Host "Starting capture process..."
          node ./scripts.v3/capture.js `
            --subscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            --resourceGroupName "${{ env.RESOURCE_GROUP_NAME }}" `
            --serviceName "${{ env.APIM_INSTANCE_NAME }}" `
            --tenantId "${{ env.AZURE_TENANT_ID }}" `
            --servicePrincipal "${{ env.AZURE_CLIENT_ID }}" `
            --servicePrincipalSecret "${{ env.AZURE_CLIENT_SECRET }}" `
            --folder "${{ GITHUB.WORKSPACE }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot"
          Write-Host "Capture completed successfully"
        shell: pwsh

      - name: Validate capture results
        env:
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}
        run: |
          if (-not (Test-Path "${{ GITHUB.WORKSPACE }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot")) {
            Write-Host "Error: Capture failed - snapshot directory not found"
            exit 1
          }
          
          $files = Get-ChildItem -Path "${{ GITHUB.WORKSPACE }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot" -Recurse
          if ($files.Count -eq 0) {
            Write-Host "Error: Capture failed - snapshot directory is empty"
            exit 1
          }
          
          Write-Host "Capture validation successful - snapshot contains files"
        shell: pwsh

      - name: publish artifact
        uses: actions/upload-artifact@v4
        env:
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}  
        with:
          name: artifacts-from-capture
          path: ${{ GITHUB.WORKSPACE }}/${{ env.OUTPUT_FOLDER_PATH }}         

  create-pull-request:
    needs: capture
    runs-on: ubuntu-latest
    env:
      OUTPUT_FOLDER_PATH: ${{ needs.capture.outputs.output-folder-path }}
      TARGET_FOLDER: "APIM"  # Fixed target folder for PR
    steps:
      - uses: actions/checkout@v4
          
      - name: Download Capture artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-from-capture
          path: "temp-artifacts"  # Download to temp location first

      - name: Extract and organize artifacts
        run: |
          echo "Extracting and organizing captured artifacts..."
          echo "Downloaded from capture folder: ${{ env.OUTPUT_FOLDER_PATH }}"
          echo "Publishing to target folder: ${{ env.TARGET_FOLDER }}"
          
          # Create target directory
          mkdir -p "${{ env.TARGET_FOLDER }}"
          
          # Find the main JSON file (data.json) from the snapshot
          if [ -f "temp-artifacts/snapshot/data.json" ]; then
            echo "Found main data.json file"
            cp "temp-artifacts/snapshot/data.json" "${{ env.TARGET_FOLDER }}/data.json"
            echo "✅ Copied data.json to ${{ env.TARGET_FOLDER }}/data.json"
          else
            echo "❌ data.json not found in expected location"
            echo "Contents of temp-artifacts:"
            find temp-artifacts -type f
            exit 1
          fi
          
          # Copy any media files if they exist
          if [ -d "temp-artifacts/snapshot/media" ]; then
            echo "Found media files, copying..."
            cp -r "temp-artifacts/snapshot/media" "${{ env.TARGET_FOLDER }}/media"
            echo "✅ Copied media files to ${{ env.TARGET_FOLDER }}/media"
          fi
          
          # Clean up temp directory
          rm -rf temp-artifacts
          
          echo "Final structure in ${{ env.TARGET_FOLDER }}:"
          find "${{ env.TARGET_FOLDER }}" -type f
        shell: bash

      - name: Verify extracted JSON file
        run: |
          echo "Verifying extracted JSON file..."
          
          if [ ! -f "${{ env.TARGET_FOLDER }}/data.json" ]; then
            echo "❌ Error: data.json not found in ${{ env.TARGET_FOLDER }}"
            exit 1
          fi
          
          # Validate JSON format
          if ! jq empty "${{ env.TARGET_FOLDER }}/data.json" 2>/dev/null; then
            echo "❌ Error: data.json is not valid JSON"
            exit 1
          fi
          
          # Show file info
          file_size=$(stat -c%s "${{ env.TARGET_FOLDER }}/data.json")
          echo "✅ data.json is valid JSON"
          echo "📊 File size: $file_size bytes"
          echo "🔢 Number of keys: $(jq 'keys | length' "${{ env.TARGET_FOLDER }}/data.json")"
          
          # Show first few keys for verification
          echo "📋 Sample keys:"
          jq -r 'keys | .[0:5] | .[]' "${{ env.TARGET_FOLDER }}/data.json" | head -5
        shell: bash

      - name: Create artifacts pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update APIM developer portal data.json"
          title: "🔄 APIM - Developer Portal Data Update"
          body: |
            ## Developer Portal Content Update
            
            This PR contains the latest captured content from the APIM developer portal.
            
            **Details:**
            - **Main File:** `${{ env.TARGET_FOLDER }}/data.json`
            - **Source Environment:** development
            - **Capture Timestamp:** ${{ github.run_id }}
            - **Triggered by:** @${{ github.actor }}
            
            **Changes:**
            - Updated `${{ env.TARGET_FOLDER }}/data.json` with latest portal content
            - Includes all content types, pages, layouts, and configurations
            
            **Next Steps:**
            1. Review the JSON changes in `${{ env.TARGET_FOLDER }}/data.json`
            2. Merge this PR to trigger the release workflow
            3. Monitor the deployment to target environments
            
            ---
            *This PR was auto-generated by the GitHub Actions workflow*
          labels: apim-content, automated-pr
          branch: feature/apim-content-update-${{ github.run_id }}
          delete-branch: true
          add-paths: |
            ${{ env.TARGET_FOLDER }}/data.json
            ${{ env.TARGET_FOLDER }}/media/**
        id: create-pr
        
      - name: Display PR information
        if: steps.create-pr.outputs.pull-request-number
        run: |
          echo "✅ Pull Request created successfully!"
          echo "📋 PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "🔗 PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          echo "🌿 Branch: ${{ steps.create-pr.outputs.pull-request-head-sha }}"
          echo "📁 Main file: ${{ env.TARGET_FOLDER }}/data.json"
        shell: bash
