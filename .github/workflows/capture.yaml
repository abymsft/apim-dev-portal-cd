name: Run - Capture

permissions:
  contents: write
  pull-requests: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      OUTPUT_FOLDER_PATH:
        description: 'Folder where you want to extract the artifacts'     
        required: true
        type: string
        default: 'artifacts'

jobs:
  capture:
    runs-on: ubuntu-latest
    environment: development # change this to match the dev environment created in settings 
    steps:
      - uses: actions/checkout@v4  
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Run Capture
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          APIM_INSTANCE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}  
        run: |     
          $ErrorActionPreference = "Stop"  # Exit on any error
          Write-Host "Installing dependencies..."
          npm install
          Write-Host "Starting capture process..."
          node ./scripts.v3/capture.js `
            --subscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            --resourceGroupName "${{ env.RESOURCE_GROUP_NAME }}" `
            --serviceName "${{ env.APIM_INSTANCE_NAME }}" `
            --tenantId "${{ env.AZURE_TENANT_ID }}" `
            --servicePrincipal "${{ env.AZURE_CLIENT_ID }}" `
            --servicePrincipalSecret "${{ env.AZURE_CLIENT_SECRET }}" `
            --folder "${{ github.workspace }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot"
          Write-Host "Capture completed successfully"
        shell: pwsh

      - name: Validate capture results
        env:
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}
        run: |
          if (-not (Test-Path "${{ github.workspace }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot")) {
            Write-Host "Error: Capture failed - snapshot directory not found"
            exit 1
          }
          
          $files = Get-ChildItem -Path "${{ github.workspace }}/${{ env.OUTPUT_FOLDER_PATH }}/snapshot" -Recurse
          if ($files.Count -eq 0) {
            Write-Host "Error: Capture failed - snapshot directory is empty"
            exit 1
          }
          
          Write-Host "Capture validation successful - snapshot contains files"
        shell: pwsh

      - name: publish artifact
        uses: actions/upload-artifact@v4
        env:
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}  
        with:
          name: artifacts-from-capture
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER_PATH }}         

  create-pull-request:
    needs: capture
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
          
      - name: Download Capture artifacts
        uses: actions/download-artifact@v4
        env:
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}  
        with:
          name: artifacts-from-capture
          path: "${{ github.workspace }}/${{ env.OUTPUT_FOLDER_PATH }}"

      - name: Create artifacts pull request
        uses: peter-evans/create-pull-request@v5
        env:  
          OUTPUT_FOLDER_PATH: ${{ github.event.inputs.OUTPUT_FOLDER_PATH }}      
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update developer portal capture to ${{ env.OUTPUT_FOLDER_PATH }}"
          title: "ðŸ”„ ${{ env.OUTPUT_FOLDER_PATH }} - Dev Portal Capture Update"
          body: |
            ## Developer Portal Capture Update
            
            This PR contains captured artifacts from the APIM developer portal.
            
            **Details:**
            - **Folder:** `${{ env.OUTPUT_FOLDER_PATH }}`
            - **Environment:** development
            - **Timestamp:** ${{ github.run_id }}
            - **Triggered by:** @${{ github.actor }}
            
            **Next Steps:**
            1. Review the captured artifacts
            2. Merge this PR to trigger the release workflow
            3. Monitor the deployment to target environments
            
            ---
            *This PR was auto-generated by the GitHub Actions workflow*
          labels: |
            extract
            automated-pr
            developer-portal
          branch: feature/dev-portal-capture-${{ github.run_id }}
          delete-branch: true
        id: create-pr
        
      - name: Display PR information
        if: steps.create-pr.outputs.pull-request-number
        run: |
          Write-Host "âœ… Pull Request created successfully!"
          Write-Host "ðŸ“‹ PR Number: ${{ steps.create-pr.outputs.pull-request-number }}"
          Write-Host "ðŸ”— PR URL: ${{ steps.create-pr.outputs.pull-request-url }}"
          Write-Host "ðŸŒ¿ Branch: ${{ steps.create-pr.outputs.pull-request-head-sha }}"
        shell: pwsh
