name: Run Release with Environment

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      SOURCE_FOLDER_PATH:
        required: false
        type: string
        default: 'APIM'

jobs:
  release-env:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Set source folder path
        id: set-path
        run: |
          SOURCE_PATH="${{ inputs.SOURCE_FOLDER_PATH }}"
          echo "source_path=${SOURCE_PATH:-APIM}" >> "$GITHUB_ENV"
          echo "Using source folder: ${SOURCE_PATH:-APIM}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Verify source artifacts exist
        run: |
          echo "Checking for source artifacts in: ${{ env.source_path }}"
          
          if [ ! -d "${{ env.source_path }}" ]; then
            echo "‚ùå Error: Source folder not found: ${{ env.source_path }}"
            echo "Available directories:"
            ls -la
            exit 1
          fi
          
          if [ ! -f "${{ env.source_path }}/data.json" ]; then
            echo "‚ùå Error: data.json not found in ${{ env.source_path }}"
            echo "Contents of ${{ env.source_path }}:"
            ls -la "${{ env.source_path }}"
            exit 1
          fi
          
          echo "‚úÖ Source artifacts verified"
          echo "üìÅ Using artifacts from: ${{ env.source_path }}"
        shell: bash

      - name: Run Cleanup
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          APIM_INSTANCE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
        run: |     
          Write-Host "Installing dependencies..."
          npm install
          Write-Host "Running cleanup on ${{ inputs.ENVIRONMENT }} environment..."
          node ./scripts.v3/cleanup `
            --subscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            --resourceGroupName "${{ env.RESOURCE_GROUP_NAME }}" `
            --serviceName "${{ env.APIM_INSTANCE_NAME }}" `
            --tenantId "${{ env.AZURE_TENANT_ID }}" `
            --servicePrincipal "${{ env.AZURE_CLIENT_ID }}" `
            --servicePrincipalSecret "${{ env.AZURE_CLIENT_SECRET }}"
          Write-Host "‚úÖ Cleanup completed"
        shell: pwsh

      - name: Run Generate
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          APIM_INSTANCE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
        run: |     
          Write-Host "Running generate on ${{ inputs.ENVIRONMENT }} environment..."
          Write-Host "Using source folder: ${{ env.source_path }}"
          node ./scripts.v3/generate `
            --subscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            --resourceGroupName "${{ env.RESOURCE_GROUP_NAME }}" `
            --serviceName "${{ env.APIM_INSTANCE_NAME }}" `
            --tenantId "${{ env.AZURE_TENANT_ID }}" `
            --servicePrincipal "${{ env.AZURE_CLIENT_ID }}" `
            --servicePrincipalSecret "${{ env.AZURE_CLIENT_SECRET }}" `
            --folder "${{ GITHUB.WORKSPACE }}/${{ env.source_path }}"
          Write-Host "‚úÖ Generate completed"
        shell: pwsh        

      - name: Run Update Urls
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          APIM_INSTANCE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
        run: |     
          Write-Host "Running URL updates for ${{ inputs.ENVIRONMENT }} environment..."
          $jsonLeft = (Get-Content "existingUrls.json" -Raw) | ConvertFrom-Json
          $existingUrls = $jsonLeft.uri -replace ",\s*", "," # Remove spaces between items
          $jsonRight = (Get-Content "urls.${{ inputs.ENVIRONMENT }}.json" -Raw) | ConvertFrom-Json
          $targetUrls = $jsonRight.uri -replace ",\s*", "," # Remove spaces between items
          node ./scripts.v3/updatecontenturl `
            --destSubscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            --destResourceGroupName "${{ env.RESOURCE_GROUP_NAME }}" `
            --destServiceName "${{ env.APIM_INSTANCE_NAME }}" `
            --destTenantId "${{ env.AZURE_TENANT_ID }}" `
            --destServicePrincipal "${{ env.AZURE_CLIENT_ID }}" `
            --destSecret "${{ env.AZURE_CLIENT_SECRET }}" `
            --existingEnvUrls $existingUrls `
            --destEnvUrls $targetUrls
          Write-Host "‚úÖ URL updates completed"
        shell: pwsh

      - name: Display deployment summary
        run: |
          echo "üéâ Deployment Summary for ${{ inputs.ENVIRONMENT }}"
          echo "=================================="
          echo "üìÅ Source Folder: ${{ env.source_path }}"
          echo "üè¢ APIM Instance: ${{ secrets.APIM_INSTANCE_NAME }}"
          echo "üåç Environment: ${{ inputs.ENVIRONMENT }}"
          echo "‚è∞ Completed: $(date)"
          echo "=================================="
        shell: bash
