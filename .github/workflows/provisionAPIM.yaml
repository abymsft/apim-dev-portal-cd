name: Provision APIM Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - Test
      apimServiceName:
        description: 'APIM Service Name'
        required: true
        default: 'apimDev003TDC'
        type: string
      location:
        description: 'Azure Region'
        required: true
        default: 'swedencentral'
        type: string
      sku:
        description: 'APIM SKU'
        required: true
        default: 'BasicV2'
        type: string
      APIM_PUBLISHER_EMAIL:
        description: 'APIM Publisher Email'
        required: true
        default: 'boing@boing.com'
        type: string

      APIM_PUBLISHER_NAME:
        description: 'APIM Publisher Name'
        required: true
        default: 'Boing Boing'
        type: string

permissions:
  contents: read
  pull-requests: write

env:
  AZURE_LOCATION: ${{ github.event.inputs.location }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP_NAME }}
  APIM_SERVICE_NAME: ${{ secrets.APIM_INSTANCE_NAME }}
  APIM_PUBLISHER_EMAIL: ${{ github.event.inputs.APIM_PUBLISHER_EMAIL }}
  APIM_PUBLISHER_NAME: ${{ github.event.inputs.APIM_PUBLISHER_NAME }}
jobs:
  validate:
    name: Validate Bicep Template
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Validate Bicep template
        uses: azure/bicep-deploy@v2
        with:
          type: deployment
          operation: validate
          scope: resourceGroup
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }}
          template-file: ./infrastructure/apim.bicep
          validation-level: providerNoRbac
          parameters: >
            apimServiceName=${{ env.APIM_SERVICE_NAME }}
            resourceGroupName=${{ env.AZURE_RESOURCE_GROUP }}
            location="${{ env.AZURE_LOCATION }}"
            sku=${{ github.event.inputs.sku }}
            publisherEmail=${{ env.APIM_PUBLISHER_EMAIL }}
            publisherName="${{ env.APIM_PUBLISHER_NAME }}"


  deploy-infrastructure:
    name: Deploy APIM Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ github.event.inputs.environment }}
    
    outputs:
      apimServiceName: ${{ steps.deploy.outputs.apimServiceName }}
      apimGatewayUrl: ${{ steps.deploy.outputs.apimGatewayUrl }}
      apimPortalUrl: ${{ steps.deploy.outputs.apimPortalUrl }}
      apimManagementApiUrl: ${{ steps.deploy.outputs.apimManagementApiUrl }}
      apimPrincipalId: ${{ steps.deploy.outputs.apimPrincipalId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Deploy APIM Infrastructure
        id: deploy
        uses: azure/bicep-deploy@v2
        with:
          type: deployment
          operation: validate
          scope: resourceGroup
          subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }}
          template-file: ./infrastructure/apim.bicep
          parameters: >
            apimServiceName=${{ env.APIM_SERVICE_NAME }}
            resourceGroupName=${{ env.AZURE_RESOURCE_GROUP }}
            location="${{ env.AZURE_LOCATION }}"
            sku=${{ github.event.inputs.sku }}
            publisherEmail=${{ env.APIM_PUBLISHER_EMAIL }}
            publisherName="${{ env.APIM_PUBLISHER_NAME }}"


      - name: Display Deployment Results
        run: |
          echo "## üöÄ APIM Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **APIM Service Name:** ${{ steps.deploy.outputs.apimServiceName }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Gateway URL:** ${{ steps.deploy.outputs.apimGatewayUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Developer Portal URL:** ${{ steps.deploy.outputs.apimPortalUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Management API URL:** ${{ steps.deploy.outputs.apimManagementApiUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Location:** ${{ env.AZURE_LOCATION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SKU:** ${{ github.event.inputs.sku }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Azure Portal](https://portal.azure.com/#@${{ secrets.AZURE_TENANT_ID }}/resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ApiManagement/service/${{ env.APIM_SERVICE_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Developer Portal](${{ steps.deploy.outputs.apimPortalUrl }})" >> $GITHUB_STEP_SUMMARY

  post-deployment-config:
    name: Post-Deployment Configuration
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Wait for APIM to be ready
        run: |
          echo "Waiting for APIM service to be fully provisioned..."
          for i in {1..30}; do
            status=$(az apim show \
              --name ${{ env.APIM_SERVICE_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "provisioningState" \
              --output tsv)
            
            echo "Attempt $i: APIM provisioning state is $status"
            
            if [ "$status" = "Succeeded" ]; then
              echo "‚úÖ APIM service is ready!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout waiting for APIM to be ready"
              exit 1
            fi
            
            sleep 60
          done

      - name: Configure APIM Settings
        run: |
          echo "Configuring APIM settings..."
          
          # Enable developer portal
          az apim update \
            --name ${{ env.APIM_SERVICE_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set properties.developerPortalStatus=Enabled
          
          echo "‚úÖ APIM configuration completed!"


